<%- model_class = ProjectSiteInformation -%>
<div class="page-header">
  <h1><%=t '.title', :default => model_class.model_name.human.titleize %></h1>
</div>


<div class="backgroundContainer2">
<div class="column1">
<fieldset>
  <legend>General Information</legend>
  <br>
  <dl class="dl-horizontal">

<%= link_to 'Manage Project', project_path(@project_site_information.project), class: 'btn-primary btn-sm'  %>
<dl class="dl-horizontal">
  <dt><strong>Area Length:</strong></dt>
  <dd><%= @project_site_information.area_length %></dd>
  <dt><strong>Area Width:</strong></dt>
  <dd><%= @project_site_information.area_width %></dd>
  <dt><strong>Area Description:</strong></dt>
  <dd><%= @project_site_information.area_description %></dd>
  <dt><strong>Geotech Report in Possession:</strong></dt>
  <dd><%= @project_site_information.geotech_report_in_possession %></dd>
  <dt><strong>Bobcat Accessible:</strong></dt>
  <dd><%= @project_site_information.bobcat_accessible %></dd>
  <dt><strong>Construction Fence Required:</strong></dt>
  <dd><%= @project_site_information.construction_fence_required %></dd>
  <dt><strong>Client Fence Dismantle Reinstall Required:</strong></dt>
  <dd><%= @project_site_information.client_fence_dismantle_reinstall_required %></dd>
  <dt><strong>Rock Excavation Required:</strong></dt>
  <dd><%= @project_site_information.rock_excavation_required %></dd>
  <dt><strong>Hand Dig Required:</strong></dt>
  <dd><%= @project_site_information.hand_dig_required %></dd>
  <dt><strong>Dirt Haul Off Required:</strong></dt>
  <dd><%= @project_site_information.dirt_haul_off_required %></dd>
  <dt><strong>Tree Vegetation Removal Required:</strong></dt>
  <dd><%= @project_site_information.tree_vegetation_removal_required %></dd>
  <dt><strong>Area is Sloped:</strong></dt>
  <dd><%= @project_site_information.area_is_sloped %></dd>
  <dt><strong>Site Survey Required:</strong></dt>
  <dd><%= @project_site_information.site_survey_required %></dd>
  <dt><strong>Surface Protection Required:</strong></dt>
  <dd><%= @project_site_information.surface_protection_required %></dd>
  <dt><strong>Under Ground Obstacles:</strong></dt>
  <dd><%= @project_site_information.under_ground_obstacles_yn %></dd>
  <dt><strong>Structural Removal Required:</strong></dt>
  <dd><%= @project_site_information.structural_removal_required %></dd>
  <dt><strong>PVT Locator Required:</strong></dt>
  <dd><%= @project_site_information.pvt_locator_required %></dd>


  <dt><strong>Project Name</strong></dt>
  <dd><%= @project_site_information.project.project_name %></dd>
  <dt><strong>Project Site Name</strong></dt>
  <dd><%= @project_site_information.project_site.site_name %></dd>
    <dt><strong>Area Length:</strong></dt>
    <dd><%= @project_site_information.area_length %></dd>
    <dt><strong>Area Width:</strong></dt>
    <dd><%= @project_site_information.area_width %></dd>
    <dt><strong>Area Description:</strong></dt>
    <dd><%= @project_site_information.area_description %></dd>
      </dl>
</fieldset>
</div>

  <div>
<fieldset>
  <legend>Site Attributes</legend>
  <dl class="dl-horizontal">
    <dt><strong>Geotech Report in Possession:</strong></dt>
    <dd><%= @project_site_information.geotech_report_in_possession %></dd>
    <dt><strong>Bobcat Accessible:</strong></dt>
    <dd><%= @project_site_information.bobcat_accessible %></dd>
    <dt><strong>Construction Fence Required:</strong></dt>
    <dd><%= @project_site_information.construction_fence_required %></dd>
    <dt><strong>Client Fence Dismantle Reinstall Required:</strong></dt>
    <dd><%= @project_site_information.client_fence_dismantle_reinstall_required %></dd>
    <dt><strong>Rock Excavation Required:</strong></dt>
    <dd><%= @project_site_information.rock_excavation_required %></dd>
    <dt><strong>Hand Dig Required:</strong></dt>
    <dd><%= @project_site_information.hand_dig_required %></dd>
    <dt><strong>Dirt Haul Off Required:</strong></dt>
    <dd><%= @project_site_information.dirt_haul_off_required %></dd>
    <dt><strong>Tree Vegetation Removal Required:</strong></dt>
    <dd><%= @project_site_information.tree_vegetation_removal_required %></dd>
    <dt><strong>Area is Sloped:</strong></dt>
    <dd><%= @project_site_information.area_is_sloped %></dd>
    <dt><strong>Site Survey Required:</strong></dt>
    <dd><%= @project_site_information.site_survey_required %></dd>
    <dt><strong>Surface Protection Required:</strong></dt>
    <dd><%= @project_site_information.surface_protection_required %></dd>
    <dt><strong>Under Ground Obstacles:</strong></dt>
    <dd><%= @project_site_information.under_ground_obstacles_yn %></dd>
    <dt><strong>Structural Removal Required:</strong></dt>
    <dd><%= @project_site_information.structural_removal_required %></dd>
    <dt><strong>PVT Locator Required:</strong></dt>
    <dd><%= @project_site_information.pvt_locator_required %></dd>
  </dl>
</fieldset>
</div>
</div>





<div class="showPageButton">
  <%= link_to t('.back', :default => t("helpers.links.back")),
              project_site_informations_path, :class => 'btn btn-default'  %>
  <%= link_to t('.edit', :default => t("helpers.links.edit")),
              edit_project_site_information_path(@project_site_information), :class => 'btn btn-default' %>

  <button type="button" id="pick" class="btn btn-primary btn-sm">Documents</button>
</div>

<table class="DataTables" id="project_type_informations_table">
  <thead>
  <tr>
    <th>ID</th>
    <th>Project Type</th>
    <th>Proposal Number</th>
    <th>Revision Number</th>
    <th>Actions</th>
  </tr>
  </thead>
  <tbody>
  <% @project_site_information.project_type_informations.each do |project_type_information| %>
      <%= render partial: 'project_type_information_row', locals: {pti: project_type_information} %>
  <% end %>
  </tbody>
</table>






<!-- Button trigger modal to create a new site -->


<button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#myModal">
  Add Project Type
</button>


<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="myModalLabel">Add Design Information</h4>
      </div>
      <div class="modal-body">

        <%= form_for @project_type_information, :remote => true, :html => { :class => "form-horizontal project_type_information" } do |f| %>

            <% if @project_type_information.errors.any? %>
                <div id="error_expl" class="panel panel-danger">
                  <div class="panel-heading">
                    <h3 class="panel-title"><%= pluralize(@project_type_information.errors.count, "error") %> prohibited this project from being saved:</h3>
                  </div>
                  <div class="panel-body">
                    <ul>
                      <% @project_type_information.errors.full_messages.each do |msg| %>
                          <li><%= msg %></li>
                      <% end %>
                    </ul>
                  </div>
                </div>
            <% end %>
            <%= f.hidden_field :project_site_information_id, :value => @project_site_information.id %>
            <div class="control-group">
              <%= f.label :project_type_id, 'Project Type', :class => 'control-label' %>
              <div class="controls funabounds">
                <%= f.collection_select :project_type_id,ProjectType.all, :id, :project_type_name,{}, :class => 'form-control' %>
              </div>
              <%= error_span(@project_type_information[:project_type_id]) %>
            </div>

            <div class="control-group">
              <%= f.label :proposal_number,'Proposal Number', :class => 'control-label' %>
              <div class="controls projectName">
                <%= f.text_field :proposal_number, :class => 'form-control' %>
              </div>
              <%= error_span(@project_type_information[:proposal_number]) %>
            </div>

            <div class="control-group">
              <%= f.label :revision_number,'Revision Number', :class => 'control-label' %>
              <div class="controls projectName">
                <%= f.text_field :revision_number, :class => 'form-control' %>
              </div>
              <%= error_span(@project_type_information[:revision_number]) %>
            </div>
            <br>
            <%= f.submit nil, :class => 'btn btn-primary' %>
            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>

        <%end%>
      </div>
    </div>
  </div>
</div>


<script>
    function initPicker() {
        var picker = new FilePicker({
            apiKey: 'AIzaSyA3M8PIRLFfGr1oBfKawbHicBf3_NyHZ1U',
            clientId: '752569978631-qghpvb2v3t9ckml34744qnet4jtqnejv.apps.googleusercontent.com',
            buttonEl: document.getElementById('pick'),
            onSelect: function(file) {
                console.log(file);
                document.getElementById('fileInfo').innerHTML = file.title + '\n' + file.alternateLink + '\n' + file.downloadUrl;
                window.open(file.alternateLink);
            }
        });
    }

    function downloadFile(file, callback) {
        if (file.downloadUrl) {
            var accessToken = gapi.auth.getToken().access_token;
            var xhr = new XMLHttpRequest();
            xhr.open('GET', file.downloadUrl);
            xhr.setRequestHeader('Authorization', 'Bearer ' + accessToken);
            xhr.onload = function() {
                callback(xhr.responseText);
            };
            xhr.onerror = function() {
                callback(null);
            };
            xhr.send();
        } else {
            callback(null);
        }
    }

    /**!
     * Google Drive File Picker Example
     * By Daniel Lo Nigro (http://dan.cx/)
     */
    (function() {
        /**
         * Initialise a Google Driver file picker
         */
        var FilePicker = window.FilePicker = function(options) {
            // Config
            this.apiKey = options.apiKey;
            this.clientId = options.clientId;

            // Elements
            this.buttonEl = options.buttonEl;

            // Events
            this.onSelect = options.onSelect;
            this.buttonEl.addEventListener('click', this.open.bind(this));

            // Disable the button until the API loads, as it won't work properly until then.
            this.buttonEl.disabled = true;

            // Load the drive API
            gapi.client.setApiKey(this.apiKey);
            gapi.client.load('drive', 'v2', this._driveApiLoaded.bind(this));
            google.load('picker', '1', { callback: this._pickerApiLoaded.bind(this) });
        }

        FilePicker.prototype = {
            /**
             * Open the file picker.
             */
            open: function() {
                // Check if the user has already authenticated
                var token = gapi.auth.getToken();
                if (token) {
                    this._showPicker();
                } else {
                    // The user has not yet authenticated with Google
                    // We need to do the authentication before displaying the Drive picker.
                    this._doAuth(false, function() { this._showPicker(); }.bind(this));
                }
            },

            /**
             * Show the file picker once authentication has been done.
             * @private
             */
            _showPicker: function() {
                var accessToken = gapi.auth.getToken().access_token;
                var view = new google.picker.DocsView();
                view.setIncludeFolders(true);
                this.picker = new google.picker.PickerBuilder()
                        .enableFeature(google.picker.Feature.NAV_ENABLED)
                        .enableFeature(google.picker.Feature.MULTISELECT_ENABLED)
                        .setAppId(this.clientId)
                        .setDeveloperKey(this.apiKey)
                        .setOAuthToken(accessToken)
                        .addView(view)
                        .addView(new google.picker.DocsUploadView().setIncludeFolders(true))
                        .setCallback(this._pickerCallback.bind(this))
                        .build()
                        .setVisible(true);
            },

            /**
             * Called when a file has been selected in the Google Drive file picker.
             * @private
             */
            _pickerCallback: function(data) {
                if (data[google.picker.Response.ACTION] == google.picker.Action.PICKED) {
                    var file = data[google.picker.Response.DOCUMENTS][0],
                            id = file[google.picker.Document.ID],
                            request = gapi.client.drive.files.get({
                                fileId: id
                            });

                    request.execute(this._fileGetCallback.bind(this));
                }
            },
            /**
             * Called when file details have been retrieved from Google Drive.
             * @private
             */
            _fileGetCallback: function(file) {
                if (this.onSelect) {
                    this.onSelect(file);

                }
            },

            /**
             * Called when the Google Drive file picker API has finished loading.
             * @private
             */
            _pickerApiLoaded: function() {
                this.buttonEl.disabled = false;
            },

            /**
             * Called when the Google Drive API has finished loading.
             * @private
             */
            _driveApiLoaded: function() {
                this._doAuth(true);
            },

            /**
             * Authenticate with Google Drive via the Google JavaScript API.
             * @private
             */
            _doAuth: function(immediate, callback) {
                gapi.auth.authorize({
                    client_id: this.clientId,
                    scope: 'https://www.googleapis.com/auth/drive.readonly',
                    immediate: immediate
                }, callback);
            }
        };
    }());




</script>

<script src="https://www.google.com/jsapi?key=AIzaSyA3M8PIRLFfGr1oBfKawbHicBf3_NyHZ1U"></script>
<script src="https://apis.google.com/js/client.js?onload=initPicker"></script>
