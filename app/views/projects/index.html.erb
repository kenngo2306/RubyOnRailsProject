<%- model_class = Project -%>
<div class="page-header" xmlns="http://www.w3.org/1999/html">
  <h1><%=t '.title', :default => model_class.model_name.human.pluralize.titleize %></h1>
</div>
<div class="table-responsive">

<table class="table table-striped DataTables" >

  <thead>
    <tr>
      <th>ID</th>
      <th>Project Name</th>
      <th>Start Date</th>
      <th>Proposal Deadline</th>
      <th>Sales Person</th>
      <th>Status</th>
      <th><%=t '.actions', :default => t("helpers.actions") %></th>
    </tr>
  </thead>
  <tbody>
    <% @projects.each do |project| %>
      <tr>
        <% if current_user.admin? %>
            <% if project.project_status.status_category_id == 1 %>
                <td style = "background-color:cornflowerblue"><%= project.id %></td>
            <% elsif project.project_status.status_category_id == 2 %>
                <td style = "background-color:darkorange"><%= project.id %></td>
            <% elsif project.project_status.status_category_id == 3 %>
                <td style = "background-color:#5cb85c"><%= project.id %></td>
            <% end %>
        <td><%= project.project_name %></td>
        <% if project.start_date.nil? %>
            <td></td>
        <% else %>
            <td><%= project.start_date.to_formatted_s(:long_ordinal)%></td>
        <% end %>

        <% if project.proposal_deadline.nil? %>
                <td></td>
        <% else %>
            <td><%= project.proposal_deadline.to_formatted_s(:long_ordinal)%></td>
        <% end %>

        <td><%= project.sales_person.sales_person_fullname %></td>
        <td>
        <%= form_for(project) do |f| %>
              <%= f.collection_select :project_status_id, ProjectStatus.all, :id,:project_status_name, class: 'btn btn-default' %><br/>
        </td>
        <td>
          <div>
          <%= f.submit 'Update', :class => 'btn-default ' %>
          <% end %>
          <button type="button" id="pick" class=" btn-default">Documents</button></div>
          <div>
            <br>
          <%= link_to t('.show', :default => t("helpers.links.show")),
                      project_path(project), :class => ' btn-default btn-sm' %>
          <%= link_to t('.edit', :default => t("helpers.links.edit")),
                      edit_project_path(project), :class => ' btn-default btn-sm' %>
         <%= link_to ('PIF'), project_path(project, format: "pdf"), :class => ' btn-default btn-sm', :target => "_blank"  %>
          </div>


        </td>
        <% elsif current_user.salesrep? %>
            <td><%= link_to project.id, project_path(project) %></td>
            <td><%= project.project_name %></td>
            <td><%= project.start_date.to_formatted_s(:long_ordinal)%></td>
            <td><%= project.proposal_deadline.to_formatted_s(:long_ordinal)%></td>
            <td><%= project.sales_person.sales_person_fullname %></td>
            <td>
              <%= form_for(project) do |f| %>
                  <%= f.collection_select :project_status_id, ProjectStatus.all, :id,:project_status_name, class: 'btn btn-default' %><br/>
                  </td>
                  <td>
                    <div>
                    <%= f.submit 'Update', :class => 'btn btn-default btn-sm' %>
              <% end %>
              <button type="button" id="pick" class="btn btn-primary btn-sm">Documents</button>
              </div>
              <div>
              <%= link_to t('.show', :default => t("helpers.links.show")),
                          project_path(project), :class => 'btn btn-default btn-sm' %>
              <%= link_to t('.edit', :default => t("helpers.links.edit")),
                          edit_project_path(project), :class => 'btn btn-default btn-sm' %>
              <%= link_to ('PIF'), project_path(project, format: "pdf"), :class => 'btn btn-default btn-sm' %>
              </div>
              </td>
        <% elsif current_user.insidesales? %>
            <td><%= link_to project.id, project_path(project) %></td>
            <td><%= project.project_name %></td>
            <td><%= project.start_date.to_formatted_s(:long_ordinal)%></td>
            <td><%= project.proposal_deadline.to_formatted_s(:long_ordinal)%></td>
            <td><%= project.sales_person.sales_person_fullname %></td>
            <td>
              <%= form_for(project) do |f| %>
                  <%= f.collection_select :project_status_id, ProjectStatus.all, :id,:project_status_name, class: 'btn btn-default' %><br/>
                  </td>
                  <td>
                    <div>
                    <%= f.submit 'Update', :class => 'btn btn-default btn-sm' %>
              <% end %>

              <button type="button" id="pick" class="btn btn-primary btn-sm">Documents</button>
              </div>
              <div>
              <%= link_to t('.show', :default => t("helpers.links.show")),
                          project_path(project), :class => 'btn btn-default btn-sm' %>
              <%= link_to t('.edit', :default => t("helpers.links.edit")),
                          edit_project_path(project), :class => 'btn btn-default btn-sm' %>
              <%= link_to ('PIF'), project_path(project, format: "pdf"), :class => 'btn btn-default btn-sm' %>
              </div>
              </td>
        <% elsif current_user.installer? %>
            <td><%= link_to project.id, project_path(project) %></td>
            <td><%= project.project_name %></td>
            <td><%= project.start_date.to_formatted_s(:long_ordinal)%></td>
            <td><%= project.proposal_deadline.to_formatted_s(:long_ordinal)%></td>
            <td><%= project.sales_person.sales_person_fullname %></td>
            <td><%= project.project_status.project_status_name %></td>
            <td>
            <%= link_to ('PIF'), project_path(project, format: "pdf"), :class => 'btn-default btn-sm' %>
              <button type="button" id="pick" class="btn btn btn-primary btn-sm">Documents</button>
            </td>
        <% end %>
      </tr>

    <% end %>
  </tbody>
</table>
</div>

<% if current_user.admin? || current_user.insidesales? || current_user.salesrep? %>
<%= link_to t('.new', :default => t("helpers.links.new")),
            new_project_path,
            :class => 'btn btn-primary btn-sm' %>
<% end %>

<script>
    function initPicker() {
        var picker = new FilePicker({
            apiKey: 'AIzaSyA3M8PIRLFfGr1oBfKawbHicBf3_NyHZ1U',
            clientId: '752569978631-qghpvb2v3t9ckml34744qnet4jtqnejv.apps.googleusercontent.com',
            buttonEl: document.getElementById('pick'),
            onSelect: function(file) {
                console.log(file);
                document.getElementById('fileInfo').innerHTML = file.title + '\n' + file.alternateLink + '\n' + file.downloadUrl;
                window.open(file.alternateLink);
            }
        });
    }

    function downloadFile(file, callback) {
        if (file.downloadUrl) {
            var accessToken = gapi.auth.getToken().access_token;
            var xhr = new XMLHttpRequest();
            xhr.open('GET', file.downloadUrl);
            xhr.setRequestHeader('Authorization', 'Bearer ' + accessToken);
            xhr.onload = function() {
                callback(xhr.responseText);
            };
            xhr.onerror = function() {
                callback(null);
            };
            xhr.send();
        } else {
            callback(null);
        }
    }

    /**!
     * Google Drive File Picker Example
     * By Daniel Lo Nigro (http://dan.cx/)
     */
    (function() {
        /**
         * Initialise a Google Driver file picker
         */
        var FilePicker = window.FilePicker = function(options) {
            // Config
            this.apiKey = options.apiKey;
            this.clientId = options.clientId;

            // Elements
            this.buttonEl = options.buttonEl;

            // Events
            this.onSelect = options.onSelect;
            this.buttonEl.addEventListener('click', this.open.bind(this));

            // Disable the button until the API loads, as it won't work properly until then.
            this.buttonEl.disabled = true;

            // Load the drive API
            gapi.client.setApiKey(this.apiKey);
            gapi.client.load('drive', 'v2', this._driveApiLoaded.bind(this));
            google.load('picker', '1', { callback: this._pickerApiLoaded.bind(this) });
        }

        FilePicker.prototype = {
            /**
             * Open the file picker.
             */
            open: function() {
                // Check if the user has already authenticated
                var token = gapi.auth.getToken();
                if (token) {
                    this._showPicker();
                } else {
                    // The user has not yet authenticated with Google
                    // We need to do the authentication before displaying the Drive picker.
                    this._doAuth(false, function() { this._showPicker(); }.bind(this));
                }
            },

            /**
             * Show the file picker once authentication has been done.
             * @private
             */
            _showPicker: function() {
                var accessToken = gapi.auth.getToken().access_token;
                var view = new google.picker.DocsView();
                view.setIncludeFolders(true);
                this.picker = new google.picker.PickerBuilder()
                        .enableFeature(google.picker.Feature.NAV_ENABLED)
                        .enableFeature(google.picker.Feature.MULTISELECT_ENABLED)
                        .setAppId(this.clientId)
                        .setDeveloperKey(this.apiKey)
                        .setOAuthToken(accessToken)
                        .addView(view)
                        .addView(new google.picker.DocsUploadView().setIncludeFolders(true))
                        .setCallback(this._pickerCallback.bind(this))
                        .build()
                        .setVisible(true);
            },

            /**
             * Called when a file has been selected in the Google Drive file picker.
             * @private
             */
            _pickerCallback: function(data) {
                if (data[google.picker.Response.ACTION] == google.picker.Action.PICKED) {
                    var file = data[google.picker.Response.DOCUMENTS][0],
                            id = file[google.picker.Document.ID],
                            request = gapi.client.drive.files.get({
                                fileId: id
                            });

                    request.execute(this._fileGetCallback.bind(this));
                }
            },
            /**
             * Called when file details have been retrieved from Google Drive.
             * @private
             */
            _fileGetCallback: function(file) {
                if (this.onSelect) {
                    this.onSelect(file);

                }
            },

            /**
             * Called when the Google Drive file picker API has finished loading.
             * @private
             */
            _pickerApiLoaded: function() {
                this.buttonEl.disabled = false;
            },

            /**
             * Called when the Google Drive API has finished loading.
             * @private
             */
            _driveApiLoaded: function() {
                this._doAuth(true);
            },

            /**
             * Authenticate with Google Drive via the Google JavaScript API.
             * @private
             */
            _doAuth: function(immediate, callback) {
                gapi.auth.authorize({
                    client_id: this.clientId,
                    scope: 'https://www.googleapis.com/auth/drive.readonly',
                    immediate: immediate
                }, callback);
            }
        };
    }());




</script>

<script src="https://www.google.com/jsapi?key=AIzaSyA3M8PIRLFfGr1oBfKawbHicBf3_NyHZ1U"></script>
<script src="https://apis.google.com/js/client.js?onload=initPicker"></script>

